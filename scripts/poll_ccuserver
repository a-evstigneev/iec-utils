#!/bin/sh

IECDIR=/opt/iecd
. $IECDIR/iecenv
. $UTILS/log_utils
. $UTILS/service_utils
. $UTILS/db_utils
. $UTILS/http_utils

asduaddr=$1
sleeptime=60

link_ts=1000
link_status=-1
link_up=1
link_down=0

while true; do
	if response=$(get_state $asduaddr); then
		echo $response | jq '.' # Для отладки
		logmsgtime "Connection with $CCUSERVER server succeeded"
		link_status=$link_up && tm_send "$asduaddr" "$link_ts" 30 "$link_status"
		
		listid=$(json_parse "$asduaddr" "state" "$response")  
		[ -n "$listid" ] && ack_events "$asduaddr" "$listid"
		
		listen_events $asduaddr | \
		sed -u -e '/^[[:space:]]*$/d' -e 's/^data:\(.*\)$/\1/' | \
		while read string; do 
			case "$string" in
			'{"Type":"Keepalive"}') 
				continue 
			;;
			'{"Type":"NewEvents"}') 
				if response=$(get_state $asduaddr); then
					echo $response | jq '.' # Для отладки
					logmsgtime "Connection with $CCUSERVER server succeeded"
					listid=$(json_parse "$asduaddr" "state" "$response")  
					[ -n "$listid" ] && ack_events "$asduaddr" "$listid"
				else
					logmsgtime "Synchronization with $CCUSERVER server failed"
				fi
			;;
			'{"Type":"Close"}') 
				logmsgtime "Controller has disconnected. The channel will be closed." 
				break 
			;;
			*) 
				logmsgtime "Undefined data. The channel will be closed."
				break 
			;;
		esac
		done
		logmsgtime "Connection to the $CCUSERVER server closed"
	else
		logmsgtime  "Synchronization with $CCUSERVER server failed"
	fi

	if [ "$link_status" -ne "$link_down" ]; then
		link_status=$link_down && tm_send "$asduaddr" "$link_ts" 30 "$link_status"
	fi
	logmsgtime  "Retry sync with $CCUSERVER server after $sleeptime sec"
	sleep $sleeptime 
done
