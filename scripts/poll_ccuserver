#!/bin/sh

. $IECDIR/config/iecenv
. $UTILS/log_utils
. $UTILS/service_utils
. $UTILS/db_utils
. $UTILS/http_ccuserver_utils

asduaddr=$1
sleeptime=60

polltime=1800
gipid=""

ginterrog() 
{
	local time asduaddr response
	asduaddr=$1
	time=$2
		
	while true; do
		sleep $time
		if response=$(get_state $asduaddr); then
			json_parse "$asduaddr" "$response" "info"	
			logmsgtime "The general interrogation $CCUSERVER server was successful"
		fi
		
		# Впоследствии удалить вывод сырых сообщений
		[ -n "$response" ] && logmsgtime_debug "$response" >> $LOGDIR/ccuserver/rtu_${asduaddr}_gi_raw.log
	
	done
}

link_ts=1000
link_status=-1
link_up=1
link_down=0

while true; do
	if response=$(get_state $asduaddr); then
		logmsgtime "Connection with $CCUSERVER server succeeded"
		link_status=$link_up; ts_send "$asduaddr" "$link_ts" 30 "$link_status"
		json_parse "$asduaddr" "$response" "info" 

		ginterrog $asduaddr $polltime &
		gipid=$!
		
		listen_events $asduaddr | \
		sed -u -e '/^[[:space:]]*$/d' -e 's/^data:\(.*\)$/\1/' | \
		while read string; do 

			# Впоследствии удалить вывод сырых сообщений
			logmsgtime_debug "$string" >> $LOGDIR/ccuserver/rtu_${asduaddr}_event_raw.log

			case "$string" in
			'{"Type":"Keepalive"}') 
				continue 
			;;
			'{"Type":"NewEvents"}') 
				if events=$(get_state $asduaddr); then
					logmsgtime "Event from $CCUSERVER Received"
					listid=$(json_parse "$asduaddr" "$events" "event")  
					[ -n "$listid" ] && ack_events "$asduaddr" "$listid"
				else
					logmsgtime "Synchronization with $CCUSERVER server failed"
				fi

				# Впоследствии удалить вывод сырых сообщений
				[ -n "$events" ] && logmsgtime_debug "$events" >> $LOGDIR/ccuserver/rtu_${asduaddr}_event_raw.log

			;;
			'{"Type":"Close"}') 
				logmsgtime "Controller has disconnected. The channel will be closed." 
				break 
			;;
			*) 
				logmsgtime "Undefined data. The channel will be closed."
				break 
			;;
			esac
		done
	else
		logmsgtime  "Synchronization with $CCUSERVER server failed"
	fi

	if [ "$link_status" -ne "$link_down" ]; then
		link_status=$link_down; ts_send "$asduaddr" "$link_ts" 30 "$link_status"
		setdbact_qds "$asduaddr" "NT"
		[ -n "$gipid" ] && kill -TERM $gipid >/dev/null 2>&1 && gipid=""
	fi

	sleep "$sleeptime" 
done
