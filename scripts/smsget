#!/bin/sh

. $IECDIR/service-func
sleeptime=10
smslistdel=""
errmsg=""

usage() 
{
	echo "Usage: $0 [-idcgt] -F DEVICE"
	echo " "
	echo "  -i  Device information."
	echo "  -d  Device initialization."
	echo "  -c  Device check."
	echo "  -t	Time to sleep." 
	echo "  -g  Receiving messages from the device."
	echo "  -F  Name of gsm-device (example: /dev/ttyUSB0)"
	echo " "
}

smssep()
{
	local _line _listid _smsnum _comaddr _crts_name _inode
	local _id _stat _num _sp _date _sms _senddev _filename

	_listid=""; _smsnum=0; _comaddr=""
	
	while read _line; do
		if echo "$_line" | grep -q 'OK'; then
			if [ $_smsnum -eq 0 ]; then
				_listid="empty"
			fi
			break
		elif echo "$_line" | grep -q 'ERROR'; then
			_listid="error"
			break
		elif echo "$_line" | grep -v -q "CMGL"; then
			_listid="undef"
			break
		fi
		
		IFS="," read _id _stat _num _sp _date <<-EOF
			$_line
		EOF

		read _sms
		
		_id=$(echo $_id | sed 's/+CMGL: //')
		_num=$(echo $_num | sed 's/"//g; s/+//')
		
		logmsg "Read sms_id = $_id, number = $_num, sms = $_sms"
	
		_comaddr=$(grep -q $_num $RTU_LIST && grep $_num $RTU_LIST | awk '{ print $1 }')
		if [ $_comaddr ]; then
			_senddev=$(grep $_num $RTU_LIST | awk '{ print $3 }')
			
			case $_senddev in
			granit)
				/usr/bin/printf '%s\n' "$_sms" | smsdrop_granit $_comaddr &
				;;
			verset)
				/usr/bin/printf '%s\n' "$_sms" | smsdrop_verset $_comaddr &
				;;
			esac
			
			wait %1
			
			case $? in
			0)
				logmsg "Sms id $_id was written synchronously to disk"
				_listid="${_listid}${_id} "
				
				# Trigger activation for each instance quemngr
				while read _crts_name rest; do
					_filename="$VARDIR/$_crts_name/work/drop/msg"
					cp $SMSDROP/msg $_filename
					_inode="$VARDIR/$_crts_name/work/drop/`stat -c %i $_filename`"
					
					if sync $_filename; then
						mv "$_filename" "$_inode"
					fi
					
					/usr/bin/printf "1" > $VARDIR/$_crts_name/work/trigger
				done <<-EOF
					$(cat $CRTS_LIST | grep -v '^#' | sed '/^$/d')
				EOF
				rm $SMSDROP/msg
			;;
			1)
				logmsg "Synchronous recording to disk failed"
			;;
			2)
				logmsg "Sms message format is incorrect"
				_listid="${_listid}${_id} "
			;;
			esac
		else
			logmsg "Phone number $_num is not valid"
			_listid="${_listid}${_id} "
		fi
		
		_smsnum=$(($_smsnum + 1))
	done
	
	echo "$_listid"
}

atsend()
{
	local _fd _cmd
	_fd=$1
	_cmd=$2
	
	/usr/bin/printf '%s\r\n' $_cmd 2>/dev/null >&"$_fd"	
}

readreply()
{
	local _fd _reply _childpid
	_fd=$1

	trap ' ' ALRM
	
	( sh -c 'sleep 2; kill -s ALRM $PPID >/dev/null 2>&1' ) &
	_childpid=$!
	
	while read <&"$_fd" _reply; do
		kill $_childpid >/dev/null 2>&1
		
		if /usr/bin/printf '%s\n' "$_reply" | grep '^[[:space:]]\{1,\}' >/dev/null 2>&1; then
			( sh -c 'sleep 2; kill -s ALRM $PPID >/dev/null 2>&1' ) &
			_childpid=$!
			continue
		fi
		
		/usr/bin/printf '%s\n' "$_reply" | sed 's/\r$//' | sed '/^$/d'
		
		if /usr/bin/printf '%s\n' "$_reply" | grep -e "OK" -e "ERROR" >/dev/null 2>&1; then
			break
		fi
		
		( sh -c 'sleep 2; kill -s ALRM $PPID >/dev/null 2>&1' ) &
		_childpid=$!
	done
}

rwdev()
{
	local _dev _cmd _var _resp
	_dev=$1
	_cmd=$2
	_var=$3

	if [ -c $_dev ]; then 
		exec 3<$_dev 4>$_dev
		atsend 4 "$_cmd"
		sleep 1
	else
		return 1
	fi

	if [ -c $_dev ]; then
		_resp=$(readreply 3)
		if [ -z "$_resp" ]; then
			exec 3<&- 4>&-
			return 1
		else
			eval $_var="'$_resp'"
			exec 3<&- 4>&-
		fi	
	else
		exec 3<&- 4>&-
		return 1
	fi
	
	return 0	
}

devinit()
{
	local _dev _cmd _result
	_dev=$1

	for _cmd in 'AT+CSCS="GSM"' "AT+CSMS=0" 'AT+CMGF=1' 'AT+CPMS="SM","SM","SM"' 'AT+CNMI=2,0,0,0,0'; do
		if rwdev $_dev "$_cmd" _result; then
			logmsg "$_cmd"
			logmsg "$_result"
		else
			return 1
		fi
	done
	
	return 0
}

devinfo()
{
	local _dev _cmd _result
	_dev=$1

	for _cmd in "AT#LSCRIPT" "AT+CREG?" "AT+CPIN?" "AT+CSQ" "AT+CREG?" "AT+COPS?"; do
		if rwdev $_dev "$_cmd" _result; then
			logmsg "$_cmd"
			logmsg "$_result"
		else
			return 1
		fi
	done
	
	return 0
}

if [ $# -eq 0 ]; then
	usage
	exit 0
fi

while getopts "cdghit:F:" opt; do
	case $opt in
	F) gsmdev=$OPTARG ;;
	i) info=1 ;;
	d) devinit=1 ;;
	g) get=1 ;;
	c) check=1 ;;
	t) sleeptime=$OPTARG ;;
	*) usage; exit ;;
	esac
done

shift $(($OPTIND - 1)) 

# Info about gsm-equipment
if [ $info ]; then
	logmsgtime "Information about $gsmdev"
	if ! devinfo $gsmdev; then
		logmsgtime "Device $gsmdev is not available now"
		exit 1
	fi
	exit 0
fi

# Gsm device init
if [ $devinit ]; then
	logmsgtime "Gsm device $gsmdev initialization"
	if ! devinit $gsmdev; then
		logmsgtime "Device $gsmdev is not available now"
		exit 1
	fi
	exit 0
fi

# Get sms from gsm-device
if [ $get ]; then
	while true; do
		
		if [ -n "$errmsg" ]; then
			sendnotice "$errmsg" 
			errmsg=""
		fi
		
		logmsgtime "Get sms list from $gsmdev"
		if rwdev "$gsmdev" "AT+CMGL=\"ALL\"" response; then
			smsiddel=$(printf '%s\n' "$response" | smssep)

			case $smsiddel in
				"empty")
					logmsgtime "Sms list is empty"			
					;;
				"error")
					logmsgtime "Error was detected on the device $gsmdev"
					errmsg="Error was detected on the device $gsmdev"
					devinit $gsmdev	
					;;
				"undef")
					logmsgtime "Undefined string \"$response\" from device $gsmdev"	
					;;
				*)
					for i in $smsiddel; do
						if  rwdev "$gsmdev" "AT+CMGD=$i" reply; then
							logmsg "Delete sms id $i"
							logmsg "$reply"
						else
							logmsgtime "Device $gsmdev is not available"
							errmsg="Device $gsmdev is not available now"
							break
						fi
					done
					;;	
			esac

			smsiddel=""
			sleep $sleeptime 
		else
			logmsgtime "Device $gsmdev is not available now"
			sleep $sleeptime 
			errmsg="Device $gsmdev is not available now"
		fi
		echo $errmsg
	done
fi
