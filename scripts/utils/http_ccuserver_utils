json_parse()
{
	local asduaddr json tag parser archdir tmpfile valuelist listid id type value
	
	asduaddr=$1
	json="$2"
	tag="$3"
	parser=$(cat "$RTU" | awk -v comaddr=$asduaddr '{ if ( $1 == comaddr) print $0 }' | cut -d " " -f 3)

	archdir="$DB_ARCH/$asduaddr"
	[ -d "$archdir" ] || mkdir -p "$archdir"

	tmpfile=$(mktemp -u -p $archdir tmpccu.XXXXXX)
	[ -f "$tmpfile" ] && rm "$tmpfile" 2>/dev/null
	
	valuelist=$(echo "$json" | $PARSERS/$parser "$asduaddr" "$tag")
	case "$tag" in
		"event" ) 
			while read id type value; do
				[ -z "$listid" ] && listid=$id || listid="${listid}%2C${id}"
				case "$type" in
					'"Event"' ) true ;;
					* )
						echo "$value" > "$tmpfile"
							
						if sync "$tmpfile" 2>/dev/null; then
							putqueue  "$tmpfile"
							putdbact  "$tmpfile"
							putdbarch "$tmpfile"
							rm "$tmpfile" 2>/dev/null
						else
							rm "$tmpfile" 2>/dev/null
						fi
					;;
				esac
			done <<-EOF
				$valuelist
			EOF
			echo "$listid"
			listid=""
		;;
		"info" )
			cat - >> "$tmpfile" <<-EOF
				$valuelist
			EOF
			
			if sync "$tmpfile" 2>/dev/null; then
				putqueue  "$tmpfile"
				putdbact  "$tmpfile"
				putdbarch "$tmpfile"
				rm "$tmpfile" 2>/dev/null
			else
				rm "$tmpfile" 2>/dev/null
			fi
		;;
	esac
}

get_devinfo()
{
	local asduaddr credential path
	asduaddr=$1
	credential=$(cat "$RTU" | awk -v comaddr=$asduaddr '{ if ( $1 == comaddr) print $0 }' | cut -d " " -f 2)
	path="/data.cgx?cmd=%7B%22Command%22%3A%22GetDeviceInfo%22%7D"

	curl -s -N --connect-timeout 15 --fail-early --keepalive --keepalive-time 15 --user "$credential" "${CCUSERVER}${path}"
}

listen_events()
{
	local asduaddr credential path
	asduaddr=$1
	credential=$(cat "$RTU" | awk -v comaddr=$asduaddr '{ if ( $1 == comaddr) print $0 }' | cut -d " " -f 2)
	path="/events"	

	curl -s -N --connect-timeout 15 --fail-early --keepalive --keepalive-time 15 --user "$credential" "${CCUSERVER}${path}"
}

ack_events()
{
	local asduaddr listid credential path
	asduaddr=$1
	listid=$2
	credential=$(cat "$RTU" | awk -v comaddr=$asduaddr '{ if ( $1 == comaddr) print $0 }' | cut -d " " -f 2)
	path="/data.cgx?cmd=%7B%22Command%22%3A%22AckEvents%22%2C%22IDs%22%3A%5B${listid}%5D%7D"

	curl -s -N --connect-timeout 15 --fail-early --keepalive --keepalive-time 15 --user "$credential" "${CCUSERVER}${path}"
}

get_state()
{
	local asduaddr credential path code response 
	
	asduaddr=$1	
	credential=$(cat "$RTU" | awk -v comaddr=$asduaddr '{ if ( $1 == comaddr) print $0 }' | cut -d " " -f 2)
	path="/data.cgx?cmd=%7B%22Command%22%3A%22GetStateAndEvents%22%7D"
	
	response=$(curl -s -N --connect-timeout 15 --fail-early --keepalive --keepalive-time 15 --user "$credential" "${CCUSERVER}${path}")
	code=$?
	case $code in
		0 )
			if echo "$response" | grep -q "DOCTYPE html"; then
				code=1
			elif ! echo "$response" | jq -e '.' >/dev/null 2>&1;  then
				code=1
			elif ! echo "$response" | jq -e '.Inputs' >/dev/null 2>&1; then
				code=1
				logmsgtime "Invalid response from $CCUSERVER - json message does not contain block Inputs"
			else 
				# correct json string response
				echo "$response"
			fi
		;;
		6 ) logmsgtime "The address of the given server $CCUSERVER could not be resolved (curl exit code = 6)" ;;
		7 ) logmsgtime "Failed to connect to host $CCUSERVER (curl exit code = 7)" ;;
		* ) logmsgtime "Curl exit code = $code" ;;
	esac
	
	return $code
}
