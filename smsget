#!/bin/sh

. $IECDIR/service-func
sleeptime=10
smslistdel=""

usage() 
{
	echo "Usage: $0 [-idcgt] -F DEVICE"
	echo " "
	echo "  -i  Device information."
	echo "  -d  Device initialization."
	echo "  -c  Device check."
	echo "  -t	Time to sleep." 
	echo "  -g  Receiving messages from the device."
	echo "  -F  Name of gsm-device (example: /dev/ttyUSB0)"
	echo " "
}

smssep()
{
	local string listid smsnum comaddr
	local id stat num sp date

	listid=""; smsnum=0; comaddr=""
	
	while read string; do
		if echo "$string" | grep -q 'OK'; then
			if [ $smsnum -eq 0 ]; then
				listid="empty"
			fi
			break
		elif echo "$string" | grep -q 'ERROR'; then
			listid="error"
			break
		elif echo "$string" | grep -v -q "CMGL"; then
			listid="undef"
			break
		fi
		
		IFS="," read id stat num sp date <<-EOF
			$string
		EOF

		read sms
		
		id=$(echo $id | sed 's/+CMGL: //')
		num=$(echo $num | sed 's/"//g; s/+//')
		
		logmsg "Read sms_id = $id, number = $num, sms = $sms"
	
		comaddr=$(grep -q $num $RTU_LIST && grep $num $RTU_LIST | awk '{ print $1 }')
		if [ $comaddr ]; then
			senddevice=$(grep $num $RTU_LIST | awk '{ print $3 }')
			
			case $senddevice in
			granit)
				/usr/bin/printf '%s\n' "$sms" | smsdrop_granit $comaddr &
				;;
			verset)
				/usr/bin/printf '%s\n' "$sms" | smsdrop_verset $comaddr &
				;;
			esac
			
			wait %1
			
			case $? in
			0)
				logmsg "Sms id $id was written synchronously to disk"
				listid="${listid}${id} "
				
				# Нам надо активировать триггер каждого экземпляра quemngr 
				while read crts_name rest; do
					filename="$VARDIR/$crts_name/work/drop/msg"
					cp $SMSDROP/msg $filename
					inodename="$VARDIR/$crts_name/work/drop/`stat -c %i $filename`"
					
					if sync $filename; then
						mv "$filename" "$inodename"
					fi
					
					/usr/bin/printf "1" > $VARDIR/$crts_name/work/trigger
				done <<-EOF
					$(cat $CRTS_LIST | grep -v '^#' | sed '/^$/d')
				EOF
				rm $SMSDROP/msg
			;;
			1)
				logmsg "Synchronous recording to disk failed"
			;;
			2)
				logmsg "Sms message format is incorrect"
				listid="${listid}${id} "
			;;
			esac
		else
			logmsg "Phone number $num is not valid"
			listid="${listid}${id} "
		fi
		
		smsnum=$(($smsnum + 1))
	done
	
	echo "$listid"
}

atsend()
{
	local fd cmd
	fd=$1
	cmd=$2
	
	/usr/bin/printf '%s\r\n' $cmd 2>/dev/null >&"$fd"	
}

readreply()
{
	local fd string
	fd=$1

	trap 'sigalarm=1' ALRM
	
	( sh -c 'sleep 2; kill -s ALRM $PPID >/dev/null 2>&1' ) &
	childpid=$!
	
	echo "Parent=$PPID, self_pid=$$, child=$childpid" >./STRINGS

	while read <&"$fd" string; do
		kill $childpid >/dev/null 2>&1
		
		if /usr/bin/printf '%s\n' "$string" | grep '^[[:space:]]\{1,\}' >/dev/null 2>&1; then
			( 
				sh -c 'sleep 2; kill -s ALRM $PPID >/dev/null 2>&1' 
			) &
			childpid=$!
			continue
		fi
		
		/usr/bin/printf '%s\n' "$string" | sed 's/\r$//' | sed '/^$/d'
		
		if /usr/bin/printf '%s\n' "$string" | grep -e "OK" -e "ERROR" >/dev/null 2>&1; then
			break
		fi
		
		(
			sh -c "sleep 2; kill -s ALRM $PPID >/dev/null 2>&1"
		) &
		childpid=$!
	done
}

rwdev()
{
	local _dev _cmd _var _resp
	_dev=$1
	_cmd=$2
	_var=$3

	if [ -c $_dev ]; then 
		exec 3<$_dev 4>$_dev
		atsend 4 "$_cmd"
		sleep 1
	else
		return 1
	fi

	if [ -c $_dev ]; then
		_resp=$(readreply 3)
		if [ -z "$_resp" ]; then
			exec 3<&- 4>&-
			return 1
		else
			eval $_var="'$_resp'"
			exec 3<&- 4>&-
		fi	
	else
		exec 3<&- 4>&-
		return 1
	fi
	
	return 0	
}

devinit()
{
	local _dev _cmd _result
	_dev=$1

	for _cmd in 'AT+CSCS="GSM"' "AT+CSMS=0" 'AT+CMGF=1' 'AT+CPMS="SM","SM","SM"' 'AT+CNMI=2,0,0,0,0'; do
		if rwdev $_dev "$_cmd" _result; then
			logmsg "$_cmd"
			logmsg "$_result"
		else
			return 1
		fi
	done
	
	return 0
}


if [ $# -eq 0 ]; then
	usage
	exit 0
fi

while getopts "cdghit:F:" opt; do
	case $opt in
	F) gsmdev=$OPTARG ;;
	i) info=1 ;;
	d) devinit=1 ;;
	g) get=1 ;;
	c) check=1 ;;
	t) sleeptime=$OPTARG ;;
	*) usage; exit ;;
	esac
done

shift $(($OPTIND - 1)) 

# Info about gsm-equipment
if [ $info ]; then
	logmsgtime "Information about $gsmdev"
	for cmd in "AT#LSCRIPT" "AT+CREG?" "AT+CPIN?" "AT+CSQ" "AT+CREG?" "AT+COPS?"; do
		if rwdev $gsmdev "$cmd" result; then
			logmsg "$cmd"
			logmsg "$result"
		else
			logmsgtime "Device $gsmdev is not available now"
			exit 1
		fi
	done
	
	result=""
	
	exit 0
fi

# Gsm device init
if [ $devinit ]; then
	logmsgtime "Gsm device $gsmdev initialization"
	if ! devinit $gsmdev; then
		logmsgtime "Device $gsmdev is not available now"
		exit 1
	fi
#	for cmd in 'AT+CSCS="GSM"' "AT+CSMS=0" 'AT+CMGF=1' 'AT+CPMS="SM","SM","SM"' 'AT+CNMI=2,0,0,0,0'; do
#		if rwdev $gsmdev "$cmd" result; then
#			logmsg "$cmd"
#			logmsg "$result"
#		else
#			logmsgtime "Device $gsmdev is not available now"
#			exit 1
#		fi
#	done
	
#	result=""
	
	exit 0
fi

# Get sms from gsm-device
if [ $get ]; then
	while true; do
		logmsgtime "Get sms list from $gsmdev"
		if rwdev "$gsmdev" "AT+CMGL=\"ALL\"" response; then
			smsiddel=$(printf '%s\n' "$response" | smssep)

			case $smsiddel in
				"empty")
					logmsgtime "Sms list is empty"			
					;;
				"error")
					logmsgtime "Error was detected on the device $gsmdev"
					devinit $gsmdev	
					;;
				"undef")
					logmsgtime "Undefined string \"$response\" from device $gsmdev"	
					;;
				*)
					for i in $smsiddel; do
						if  rwdev "$gsmdev" "AT+CMGD=$i" reply; then
							logmsg "Delete sms id $i"
							logmsg "$reply"
						else
							logmsgtime "Device $gsmdev is not available"
							break
						fi
					done
					;;	
			esac

			smsiddel=""
			sleep $sleeptime 
		else
			logmsgtime "Device $gsmdev is not available now"
			sleep $sleeptime 
		fi
	done
fi
